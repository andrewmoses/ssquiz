from flask.ext.wtf import Form
from wtforms import StringField, BooleanField, TextField, TextAreaField, SubmitField, validators, ValidationError, PasswordField, DateField, IntegerField, SelectField
from wtforms.validators import DataRequired
from app import db
from .models import User
import MySQLdb
import datetime

class LoginForm(Form):
    userid = StringField('userid', validators=[DataRequired()])
    password1 = PasswordField('password1', [validators.Length(min=6)])

class SigninForm(Form):
  email = TextField("Email",  [validators.Required("Please_enter_your_email_address."), validators.Email("Please_enter_your_email_address.")])
  password = PasswordField('Password', [validators.Required("Please_enter_a_password.")])
  submit = SubmitField("Sign In")

  def __init__(self, *args, **kwargs):
    Form.__init__(self, *args, **kwargs)

  def validate(self):
    dbql = MySQLdb.connect("localhost","root","andrewmoses","jobportal")
    cursor = dbql.cursor()
    if not Form.validate(self):
      return False

    sql = """SELECT * FROM user WHERE email=%s"""
    cursor.execute(sql,self.email.data.lower())
    check = cursor.rowcount
    if check:
      dataofv = cursor.fetchall()
      status = False
      for ch in dataofv:
	if ch[2]==self.password.data:
          status = True

      if status == False:
        self.password.errors.append("Wrong_password")
        dbql.commit()
        dbql.close()
      return status
    else:
      self.email.errors.append("Invalid_username")
      dbql.commit()
      dbql.close()
      return False





class enterinForm(Form):

  password = PasswordField('Password', [validators.Required("Please_enter_the_password.")])
  submit = SubmitField("Sign In")

  def __init__(self, *args, **kwargs):
    Form.__init__(self, *args, **kwargs)

  def validate(self):
    if not Form.validate(self):
        return False
    i = datetime.datetime.now()
    strnum = str(i.day)
    lastdigit = strnum[len(strnum)-1]
    #password list
    pwd = ['chicken','mutton','beef','samosa','idly','dosa','rice','sambar','stone','paper']
    #today's password
    todaypwd = pwd[int(lastdigit)]
    if todaypwd==self.password.data:
        return True
    else:
        self.password.errors.append("Wrong_password")
        return False


class questionForm(Form):

    creator = TextField("creator", [validators.Required("Please_enter_your_name")])
    originalquestion = TextAreaField("originalquestion", [validators.Required("Please_enter_your_questions")])

    submit = SubmitField("create")

    def __init__(self, *args, **kwargs):
        Form.__init__(self, *args, **kwargs)

    def validate(self):
        if not Form.validate(self):
            return False
        else:
            return True









class SignupForm(Form):

    username = TextField("username", [validators.Required("Please enter your username")])
    email = TextField("email", [validators.Required("Please enter your email id"), validators.Email("Please enter your email address.")])
    password = PasswordField('password', [validators.Required("Enter your password"), validators.EqualTo('confirm',message = 'passwords must match')])
    confirm = PasswordField('repeat password')
    submit = SubmitField("create account")

    def __init__(self, *args, **kwargs):
        Form.__init__(self, *args, **kwargs)

    def validate(self):
    	dbql = MySQLdb.connect("localhost","root","andrewmoses","jobportal")
        cursor = dbql.cursor()
        if not Form.validate(self):
    	    return False

    	sql = """SELECT username FROM user WHERE username=%s"""
    	cursor.execute(sql,self.username.data)
    	check = cursor.rowcount
    	msql = """SELECT email FROM user WHERE email=%s"""
    	cursor.execute(msql,self.email.data.lower())
    	checkmail = cursor.rowcount
    	if check:
    		self.username.errors.append("That username is already taken")
    		dbql.commit()
    		dbql.close()
    		return False

    	elif checkmail:
     		self.email.errors.append("That mail id is already taken")
    		dbql.commit()
    		dbql.close()
    		return False

    	else:
    		dbql.commit()
    		dbql.close()
    		return True




class newjobForm(Form):
    job_title = TextField("job title", [validators.Required("Please_enter_the_Title_of_the_Job")])
    job_lastdate = DateField("Last Date", [validators.Required("eg.dd-mm-yyyy")], format = '%d-%m-%Y')
    job_vaccancies = IntegerField('vaccancies', [validators.Required("Enter_the_number_of_vaccancies") ])
    job_lookingfor = TextField("Looking for", [validators.Required("eg.Beginner")])
    job_ctc = TextField("Salary", [validators.Required("Please_enter_the_salary_package")])
    job_contract = TextField("job contract", [validators.Required("Select_yes_or_no")])
    job_workingdays = IntegerField("job workingdays", [validators.Required("Number_of_workingdays")])
    job_refer = TextField("reference for the job", [validators.Required("Select_yes_or_no")])
    job_desc = TextField("job description", [validators.Required("Describe_the_job")])
    job_skills = TextField("job skills", [validators.Required("Enter_the_skills")])
    job_company = TextField("job company", [validators.Required("Enter_the_company")])
    submit = SubmitField("create the job")

    def __init__(self, *args, **kwargs):
        Form.__init__(self, *args, **kwargs)

    def validate(self):
        if not Form.validate(self):
	    return False

        else:
            return True






class newstageForm(Form):
    dbql = MySQLdb.connect("localhost","root","andrewmoses","jobportal")
    cursor = dbql.cursor()
    sql = """SELECT * FROM user"""
    cursor.execute(sql)
    dataofv = cursor.fetchall()
    choary = []
    for u in dataofv:
      tup = (str(u[1]),str(u[1]))
      choary.append(tup)


    stage_title = TextField("stage title", [validators.Required("Please enter the Title of the Stage")])
    stage_incharge = SelectField("stage incharge", [validators.Required("Please select a user")], choices=choary)
    submit = SubmitField("create the stage")



    def __init__(self, *args, **kwargs):
        Form.__init__(self, *args, **kwargs)

    def validate(self):
        if not Form.validate(self):
	    return False

        else:
            return True
